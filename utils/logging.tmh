// ===========================================================================
//					Thrustmaster T.A.R.G.E.T. profile for DCS
//						Copyright (c) 2021 Attila Kovacs
// ===========================================================================
//
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// ===========================================================================

// Contains common utility functions for logging.

int debug(alias message)
{
	// Writes a log message to the T.A.R.G.E.T. window if verbose logging is enabled.
	//
	// Args:
	//	message: The message to write.

	if (VERBOSE_LOGGING == YES)
	{
		printf("[DEBUG] >> %s\xa", &message);
	}
}

int warning(alias message)
{
	// Writes a warning log message to the T.A.R.G.E.T. console.
	//
	// Args:
	//	message: The message to write.

	printf("[WARNING] >> %s\xa", &message);
}

int error(alias message)
{
	// Writes an error log message to the T.A.R.G.E.T. console.
	//
	// Args:
	//	message: The message to write.

	printf("[ERROR] >> %s\xa", &message);
}

int show_mapping(
	alias button,
	alias up_in,
	alias up_out,
	alias middle_in,
	alias middle_out,
	alias down_in,
	alias down_out)
{
	// Writes the configured mapping for the given button to the T.A.R.G.E.T. console.
	//
	// Args:
	//	button: The button that is displayed.
	//	up_in: The secondary mapping when the UP layer is active.
	//  up_out: The primary mapping when the UP layer is active.
	//  middle_in: The secondary mapping when the MIDDLE layer is active.
	//  middle_out: The primary mapping when the MIDDLE layer is active.
	//  down_in: The secondary mapping when the DOWN layer is active.
	//  down_out: The primary mapping when the DOWN layer is active.
	if (VERBOSE_LOGGING == YES)
	{
		printf(">> %s <<\xa", &button);
		printf("	UP LAYER:\xa");
		printf(" 	--->> PRIMARY: 			%s\xa", &up_out);
		printf(" 	--->> SECONDARY: 		%s\xa", &up_in);
		printf("	MIDDLE LAYER:\xa");
		printf(" 	--->> PRIMARY:			%s\xa", &middle_out);
		printf(" 	--->> SECONDARY:		%s\xa", &middle_in);
		printf("	DOWN LAYER:\xa");
		printf(" 	--->> PRIMARY:			%s\xa", &down_out);
		printf(" 	--->> SECONDARY:		%s\xa", &down_in);
		printf("\xa");
	}
}