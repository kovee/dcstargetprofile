// ===========================================================================
//					Thrustmaster T.A.R.G.E.T. profile for DCS
//						Copyright (c) 2021 Attila Kovacs
// ===========================================================================
//
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// ===========================================================================

// Contains the configuration of the LEDs.

int ConfigureWarthogLEDs()
{
	// Configures the LEDs of the Warthog throttle base.

	debug("Configuring LEDs on the Warthog throttle base...");

	// Turn off all LED status lights
	ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1));
    ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2));
    ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3));
    ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4));
    ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5));

    if(THROTTLE_USE_LED_BACKLIGHT == YES)
    {
    	// Set LED intensity level according to configured value
    	ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, THROTTLE_LED_INTENSITY));

    	// Turn on the LED backlight
        ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED0));
    }
    else
    {
    	// Set LED intensity level to 0
    	ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, 0));

    	// Turn off the LED backlight
        ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED0));
    }

    if(THROTTLE_ENABLE_REAL_BACKLIGHT == YES)
    {
    	// Turn off backlight LEDs
        ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED0));
    }
}

int ConfigureRMFDLEDs()
{
	// Configures the LEDs on the right MFD.

	debug("Configuring LEDs on the right MFD.");

	// Turn off all LEDs
	ActKey(PULSE+KEYON+LED(&RMFD, LED_ONOFF, LED_CURRENT-LED1));
    ActKey(PULSE+KEYON+LED(&RMFD, LED_ONOFF, LED_CURRENT-LED2));

	// Configures the LEDs on the right MFD.
	if(MFD_USE_LED_BACKLIGHT == YES)
	{
    	// Set LED intensity level according to configured value
    	ActKey(PULSE+KEYON+LED(&RMFD, LED_INTENSITY, MFD_LED_INTENSITY));

    	// Turn on the LED backlight
        ActKey(PULSE+KEYON+LED(&RMFD, LED_ONOFF, LED_CURRENT+LED0));
    }
    else
    {
    	// Set LED intensity level to 0
    	ActKey(PULSE+KEYON+LED(&RMFD, LED_INTENSITY, 0));

    	// Turn off the LED backlight
        ActKey(PULSE+KEYON+LED(&RMFD, LED_ONOFF, LED_CURRENT-LED0));
    }

    if(MFD_USE_REAL_BACKLIGHT == YES)
    {
    	ActKey(PULSE+KEYON+LED(&RMFD, LED_INTENSITY, 0));
    }
}

int ConfigureLMFDLEDs()
{
	// Configures the LEDs on the left MFD.

	debug("Configuring LEDs on the left MFD.");

	// Turn off all LEDs
	ActKey(PULSE+KEYON+LED(&LMFD, LED_ONOFF, LED_CURRENT-LED1));
    ActKey(PULSE+KEYON+LED(&LMFD, LED_ONOFF, LED_CURRENT-LED2));

	// Configures the LEDs on the right MFD.
	if(MFD_USE_LED_BACKLIGHT == YES)
	{
    	// Set LED intensity level according to configured value
    	ActKey(PULSE+KEYON+LED(&LMFD, LED_INTENSITY, MFD_LED_INTENSITY));

    	// Turn on the LED backlight
        ActKey(PULSE+KEYON+LED(&LMFD, LED_ONOFF, LED_CURRENT+LED0));
    }
    else
    {
    	// Set LED intensity level to 0
    	ActKey(PULSE+KEYON+LED(&LMFD, LED_INTENSITY, 0));

    	// Turn off the LED backlight
        ActKey(PULSE+KEYON+LED(&LMFD, LED_ONOFF, LED_CURRENT-LED0));
    }

    if(MFD_USE_REAL_BACKLIGHT == YES)
    {
    	ActKey(PULSE+KEYON+LED(&LMFD, LED_INTENSITY, 0));
    }
}

int ConfigureMMFDLEDs()
{
	// Configures the LEDs on the middle MFD.

	debug("Configuring LEDs on the middle MFD.");

	// Turn off all LEDs
	ActKey(PULSE+KEYON+LED(&MMFD, LED_ONOFF, LED_CURRENT-LED1));
    ActKey(PULSE+KEYON+LED(&MMFD, LED_ONOFF, LED_CURRENT-LED2));

	// Configures the LEDs on the right MFD.
	if(MFD_USE_LED_BACKLIGHT == YES)
	{
    	// Set LED intensity level according to configured value
    	ActKey(PULSE+KEYON+LED(&MMFD, LED_INTENSITY, MFD_LED_INTENSITY));

    	// Turn on the LED backlight
        ActKey(PULSE+KEYON+LED(&MMFD, LED_ONOFF, LED_CURRENT+LED0));
    }
    else
    {
    	// Set LED intensity level to 0
    	ActKey(PULSE+KEYON+LED(&MMFD, LED_INTENSITY, 0));

    	// Turn off the LED backlight
        ActKey(PULSE+KEYON+LED(&MMFD, LED_ONOFF, LED_CURRENT-LED0));
    }

    if(MFD_USE_REAL_BACKLIGHT == YES)
    {
    	ActKey(PULSE+KEYON+LED(&MMFD, LED_INTENSITY, 0));
    }
}

int InitLEDs()
{
	// Configures the LEDs of the various controllers.

	debug("Configuring LEDs...");

	if(THROTTLE_TYPE == THROTTLE_TYPE_WARTHOG)
	{
		ConfigureWarthogLEDs();
	}

	if(USE_MFD == YES)
	{
		if(NUM_MFDS >= 1)
		{
			ConfigureRMFDLEDs();
		}

		if(NUM_MFDS >= 2)
		{
			ConfigureLMFDLEDs();
		}

		if(NUM_MFDS == 3)
		{
			ConfigureMFDLEDs();
		}
	}
}

int UpdateLEDState()
{
    // Updates the state of LEDs according to the current key states.

    if(THROTTLE_TYPE == THROTTLE_TYPE_WARTHOG)
    {
        // Battery Indicator
        if(Throttle[EOLMOTOR])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1);
        }

        // Gear Indicator
        if(Throttle[EFROVER])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2);
        }

        // Flaps Indicator
        if(Throttle[FLAPM])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3);
        }
        else if(Throttle[FLAPD])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3);
        }

        // Hook Indicator
        if(Throttle[EFLOVER])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4);
        }

        // Exterior Lights Indicator
        if(Throttle[BSF])
        {
            LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5);
        }
    }
}