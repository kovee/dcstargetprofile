// ===========================================================================
//					Thrustmaster T.A.R.G.E.T. profile for DCS
//						Copyright (c) 2021 Attila Kovacs
// ===========================================================================
//
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// ===========================================================================

// Contains the control mapping logic.

include "profile/cm_a10grip.tmh"
include "profile/cm_cougargrip.tmh"
include "profile/cm_fa18grip.tmh"
include "profile/cm_mfds.tmh"
include "profile/cm_rudder.tmh"
include "profile/cm_throttle.tmh"

int MapJoystick()
{
	// Maps joystick controls.

	debug("Mapping joystick controls...");

	if(JOYSTICK_TYPE == JOYSTICK_TYPE_WARTHOG)
	{
		if(JOYSTICK_GRIP == JOYSTICK_GRIP_A10)
		{
			MapJoystickA10Grip();
		}
		else if(JOYSTICK_GRIP == JOYSTICK_GRIP_FA18)
		{
			MapJoystickFA18Grip();
		}
		else if(JOYSTICK_GRIP == JOYSTICK_GRIP_COUGAR)
		{
			MapJoystickCougarGrip();
		}
		else
		{
			error("Unsupported grip type sepcified.");
		}
	}
	else
	{
		error("Unsupported joystick type specified.");
	}
}

int MapThrottle()
{
	// Maps throttle controls.

	debug("Mapping throttle controls...");

	if(THROTTLE_TYPE == THROTTLE_TYPE_WARTHOG)
	{
		MapWarthogThrottleGrip();
		MapWarthogThrottleBase();
	}
	else
	{
		error("Unsupported throttle type.");
	}
}

int MapRudder()
{
	// Maps rudder controls.

	debug("Mapping rudder controls...");

	if(RUDDER_TYPE == RUDDER_TFLIGHT)
	{
		MapTFlightRudder();
	}
	else
	{
		error("Unsupported rudder type.");
	}
}

int MapMFDs()
{
	// Maps MFD controls.

	debug("Mapping MFD controls...");

	if(USE_MFD == YES)
	{
		if(NUM_MFDS >= 1)
		{
			MapRMFD();
		}

		if(NUM_MFDS >= 2)
		{
			MapLMFD();
		}

		if(NUM_MFDS == 3)
		{
			MapMMFD();
		}
	}
}

int MapControls()
{
	// Creates control mapping for the configured plane.

	debug("Mapping controls...");

	if(DCS_PLANE == DCS_PLANE_FA18C)
	{
		SpecifyFA18ControlMap();
	}
	else
	{
		error("Unsupported plane type specified.");
	}

	MapJoystick();
	MapThrottle();
	MapRudder();
	MapMFDs();
}